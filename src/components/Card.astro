---
// Card.astro
import "flag-icons/css/flag-icons.min.css";

interface Props {
  title: string;
  image?: string;
  asn: string;
  tableType?: "full" | "half";
  locations?: string[]; // Now just array of country codes
  services?: string[];
  features?: string[];
  rpkiStatus?: "valid" | "invalid";
  prefixUpdateStatus?: "positive" | "negative";
  bgpFee: string;
  pricing: string;
  currency: "USD" | "EUR" | "GBP";
  url: string;
}

const {
  title,
  image,
  asn,
  tableType = "full",
  locations = [],
  services = [],
  features = [],
  rpkiStatus,
  prefixUpdateStatus,
  bgpFee,
  pricing,
  currency = "USD",
  url,
} = Astro.props;

const currencySymbols = {
  USD: "$",
  EUR: "€",
  GBP: "£",
};
const tableTypeText = tableType === "full" ? "Full Table" : "Half Table";
const currencySymbol = currencySymbols[currency];
// Create a function to get country names
function getCountryName(code: string, lang = "en") {
  try {
    const displayNames = new Intl.DisplayNames([lang], { type: "region" });
    return displayNames.of(code.toUpperCase());
  } catch (error) {
    return code; // Fallback to code if something goes wrong
  }
}
function getFlagClass(code: string): string {
    return `fi fi-${code.toLowerCase()} mr-1`;
}
---

<div class="card w-96 bg-base-200 shadow-xl">
  <div class="card-body">
    <!-- Card Header -->
    <div class="card-actions justify-between items-center mb-4">
      <div class="badge badge-outline badge-info">{asn}</div>
      <div class="flex items-center space-x-2">
        <button class="btn btn-outline btn-sm">{tableTypeText}</button>
        {
          rpkiStatus && (
            <button
              class={`btn btn-sm btn-square btn-outline ${rpkiStatus === "valid" ? "btn-success" : "btn-error"}`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                />
              </svg>
            </button>
          )
        }
        {
          prefixUpdateStatus && (
            <button
              class={`btn btn-sm btn-square btn-outline ${prefixUpdateStatus === "positive" ? "btn-success" : "btn-error"}`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </button>
          )
        }
      </div>
    </div>

    <!-- Logo and Company Name -->
    <div class="flex items-center mb-4">
      {
        image ? (
          <div class="avatar mr-4">
            <div class="w-12 rounded-lg">
              <img src={image} alt={`${title} Logo`} />
            </div>
          </div>
        ) : null
      }
      <h1 class="card-title text-3xl">{title}</h1>
    </div>

    <!-- Sections -->
    <div class="space-y-6">
      <!-- Locations -->
{locations.length > 0 && (
    <div>
        <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
            Locations
        </h2>
        <div class="flex flex-wrap gap-2">
            {locations.map((code) => (
                <div class="badge badge-outline">
                    <span class={getFlagClass(code)}></span>
                    {getCountryName(code)}
                </div>
            ))}
        </div>
    </div>
)}

      <!-- Services -->
      {
        services.length > 0 && (
          <div>
            <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
              Services
            </h2>
            <div class="flex flex-wrap gap-2">
              {services.map((service) => (
                <div class="badge badge-outline">{service}</div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Features -->
      {
        features.length > 0 && (
          <div>
            <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
              Features
            </h2>
            <div class="flex flex-wrap gap-2">
              {features.map((feature) => (
                <div class="badge badge-outline">{feature}</div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Pricing & Fee -->
      <div class="grid grid-cols-2 gap-4 pt-2">
        <div>
          <h2
            class="text-sm font-semibold uppercase tracking-wider mb-2 text-base-content/70"
          >
            BGP Fee
          </h2>
          <p class="font-semibold text-base-content">
            {currencySymbol}
            {bgpFee} setup fee
          </p>
        </div>
        <div>
          <h2
            class="text-sm font-semibold uppercase tracking-wider mb-2 text-base-content/70"
          >
            Pricing
          </h2>
          <p class="font-semibold text-base-content">
            Starting at {currencySymbol}
            {pricing}/mo
          </p>
        </div>
      </div>

      <!-- Visit Button -->
      <div class="card-actions justify-center mt-6">
        <a href={url} class="btn btn-primary w-full">Visit</a>
      </div>
    </div>
  </div>
</div>
