---
import "flag-icons/css/flag-icons.min.css";

interface Props {
  title: string;
  image?: string;
  asn: string;
  tableType?: "full" | "half";
  locations?: string[];
  services?: string[];
  features?: string[];
  rpkiStatus?: "valid" | "invalid";
  prefixUpdateStatus?: "positive" | "negative";
  bgpFee: string;
  pricing: string;
  currency: "USD" | "EUR" | "GBP";
  url: string;
}

const {
  title,
  image,
  asn,
  tableType = "full",
  locations = [],
  services = [],
  features = [],
  rpkiStatus,
  prefixUpdateStatus,
  bgpFee,
  pricing,
  currency = "USD",
  url,
} = Astro.props;

function getCountryName(code: string, lang = "en"): string {
  try {
    const displayNames = new Intl.DisplayNames([lang], { type: "region" });
    return displayNames.of(code);
  } catch (error) {
    return code;
  }
}

function parseLocation(location: string): {
  city: string;
  countryCode: string;
} {
  const [city, countryCode] = location.split(", ");
  return { city, countryCode };
}

const currencySymbols = {
  USD: "$",
  EUR: "€",
  GBP: "£",
};

const tableTypeText = tableType === "full" ? "Full Table" : "Half Table";
const currencySymbol = currencySymbols[currency];
---

<div class="card w-[340px] bg-base-200">
  <div class="card-body">
    <!-- Card Header -->
    <div class="card-actions justify-between items-center mb-4">
      <div class="text-info">{asn}</div>
      <div class="flex items-center gap-2">
        <button class="btn btn-sm btn-outline">{tableTypeText}</button>
        {
          rpkiStatus && (
            <button
              class={`btn btn-sm btn-square btn-outline ${rpkiStatus === "valid" ? "btn-success" : "btn-error"}`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                />
              </svg>
            </button>
          )
        }
        {
          prefixUpdateStatus && (
            <button
              class={`btn btn-sm btn-square btn-outline ${prefixUpdateStatus === "positive" ? "btn-success" : "btn-error"}`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </button>
          )
        }
      </div>
    </div>

    <!-- Logo and Company Name -->
    <div class="flex items-center gap-4 mb-4">
      <div class="w-12 h-12 rounded-lg bg-base-100 flex items-center justify-center ">
        {image ? (
          <img src={image} alt={`${title} logo`} class="max-w-full max-h-full" />
        ) : (
          <div class="text-2xl font-bold text-base-content/20">{title.charAt(0)}</div>
        )}
      </div>
      <div>
        <h2 class="card-title">{title}</h2>
      </div>
    </div>

    <!-- Locations -->
    {
      locations.length > 0 && (
        <div>
          <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
            Locations
          </h2>
          <div class="flex flex-wrap gap-2">
            {locations.map((location) => {
              const { city, countryCode } = parseLocation(location);
              return (
                <div class="badge badge-outline">
                  <span class={`fi fi-${countryCode.toLowerCase()} mr-1`} />
                  {city}
                </div>
              );
            })}
          </div>
        </div>
      )
    }

    <!-- Services -->
    {
      services.length > 0 && (
        <div>
          <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
            Services
          </h2>
          <div class="flex flex-wrap gap-2">
            {services.map((service) => (
              <div class="badge badge-outline">{service}</div>
            ))}
          </div>
        </div>
      )
    }

    <!-- Features -->
    {
      features.length > 0 && (
        <div>
          <h2 class="text-sm font-semibold uppercase tracking-wider mb-3 text-base-content/70">
            Features
          </h2>
          <div class="flex flex-wrap gap-2">
            {features.map((feature) => (
              <div class="badge badge-outline">{feature}</div>
            ))}
          </div>
        </div>
      )
    }

    <!-- Pricing & Fee -->
    <div class="grid grid-cols-2 gap-4 pt-2">
      <div>
        <h2
          class="text-sm font-semibold uppercase tracking-wider mb-2 text-base-content/70"
        >
          BGP Fee
        </h2>
        <p class="font-semibold text-base-content">
          {currencySymbol}
          {bgpFee}
          {currency} setup fee
        </p>
      </div>
      <div>
        <h2
          class="text-sm font-semibold uppercase tracking-wider mb-2 text-base-content/70"
        >
          Pricing
        </h2>
        <p class="font-semibold text-base-content">
          Starting at {currencySymbol}
          {pricing}/mo {currency}
        </p>
      </div>
    </div>

    <!-- View Button -->
    <div class="card-actions justify-end mt-4">
      <a
        href={url}
        target="_blank"
        rel="noopener noreferrer"
        class="btn btn-primary">View Provider</a
      >
    </div>
  </div>
</div>
